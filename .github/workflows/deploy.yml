name: Deploy Chatbot
on:
 push:
   branches: [ main ]

jobs:
 build:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v2
     
     - name: Login to Docker Hub
       uses: docker/login-action@v2
       with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}
     
     - name: Build and push Chatbot
       uses: docker/build-push-action@v4
       with:
         context: .
         file: ./Dockerfile
         push: true
         build-args: |
           DB_USER=${{ secrets.DB_USER }}
           DB_HOST=postgres
           DB_NAME=${{ secrets.DB_NAME }}
           DB_PASSWORD=${{ secrets.DB_PASSWORD }}
           PORT=3000
           OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
           NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
           NEXT_PUBLIC_API_DOMAIN=${{ secrets.NEXT_PUBLIC_API_DOMAIN }}
         tags: |
           ${{ secrets.DOCKERHUB_USERNAME }}/clone-gemini-chatbot:latest
           ${{ secrets.DOCKERHUB_USERNAME }}/clone-gemini-chatbot:${{ github.sha }}

 deploy:
   needs: build
   runs-on: ubuntu-latest
   steps:
     - name: Deploy to EC2
       uses: appleboy/ssh-action@v1.0.0
       with:
         host: ${{ secrets.EC2_HOST }}
         username: ${{ secrets.EC2_USERNAME }}
         key: ${{ secrets.EC2_SSH_KEY }}
         script: |
           echo "Starting Chatbot deployment..."
           cd ~/gemini-chatbot
           
           # 建立或更新 .env 文件
           cat > .env << EOL
           DB_USER=${{ secrets.DB_USER }}
           DB_HOST=postgres
           DB_NAME=${{ secrets.DB_NAME }}
           DB_PASSWORD=${{ secrets.DB_PASSWORD }}
           PORT=3000
           OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
           NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
           NEXT_PUBLIC_API_DOMAIN=${{ secrets.NEXT_PUBLIC_API_DOMAIN }}
           DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
           POSTGRES_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
           EOL
           
           docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
           
           docker compose pull chatbot
           docker compose up -d